#!/usr/bin/nodejs

// usage: ./createConstants.js {dirToUmbraParts}
//
// example: ./createConstants.js ../../MKS/FOR_RELEASE/GameData/UmbraSpaceIndustries/Kolonization/Parts/
// 
// Ubuntu install notes:
// Make sure you have nodejs installed and you can find /usr/bin/nodejs
//git@github.com:BobPalmer/MKS.git
// 1. sudo apt-get install npm

console.log("Hello")

function writeToFile(parts) {

	outputFilename = 'modulesConstants.js'

	var fs = require('fs');

	var header = "// Autogenerated file. Run ./createConstants.js pathToMksPartsFolder\n";

	fs.writeFile(outputFilename, header + "var modules = " + JSON.stringify(parts, null, 4), function(err) {
    	if(err) {
    	  console.log(err);
    	} else {
    	  console.log(parts.length + " parts found, json saved to " + outputFilename);
    	}
	}); 
}

function readLinesSync(filename) {
	var fs = require('fs');
	var lines = fs.readFileSync(filename).toString().split("\n");
	
	return lines;
}

function readPart(filename) {
	// console.log("parse " + filename)

	part = {};
	var regexTitle = /title = (.*)/
	var regexName = /name = ([\w\s]+)/
	var regexDescription = /description = ([\w\s^\r]+)/
	var regexCapacity = /CrewCapacity = ([\w\s^\r]+)/


	var regexMksModule = /name = MKSModule/
	var regexMksProperty = /(\w+) = (.*)/
	
	var regexStartOfModule = /MODULE/
	var regexEndOfModule = /}/

	var isMksModule = false;
	var isAnyModule = false;

	var lines = readLinesSync(filename);
	for(i in lines) {
		var line = lines[i];
		
		line = line.replace('\r','');
		line = line.replace('\t','');

		if ( !isAnyModule ) {
			if ( regexTitle.test(line) ) {
				part.title = line.match(regexTitle)[1];
			}

			if  ( !part.code && regexName.test(line) ) {
				part.code = line.match(regexName)[1];
			}

			if ( regexDescription.test(line) ) {
				part.description = line.match(regexDescription)[1];
			}

			if ( regexCapacity.test(line) ) {
				var iValue = parseInt(line.match(regexCapacity)[1]);
				if ( iValue != NaN ) {
					part.crewCapacity = iValue;
				} else {
					part.crewCapacity = 0;
				}
			}
		}

		if ( regexStartOfModule.test(line)) {
			isAnyModule = true;
		}

		// TODO start storing data before detecting it's an MKS Module
		if ( regexMksModule.test(line) ) {
			// console.log("Found a mks module");
			isMksModule = true;
		}

		if ( regexEndOfModule.test(line)) {
			isMksModule = false;
			isAnyModule = false;
		}

		if ( isMksModule ) {
			var matches = line.match(regexMksProperty);
			if (matches) {
				var key = matches[1];
				var value = matches[2];

				if ( value  != 0 ) {
					var iValue = parseInt(value);
					if ( iValue != NaN ) {
						part[key] = iValue;
					} else {
						part[key] = value;
					}
				}

				if ( key == 'efficiencyPart') {
					part[key] = parseEfficiencyPart(value);
				}
			}
		}

	}

	
	return part
}

function parseEfficiencyPart(efficiencyPart) {

	var elements = efficiencyPart.replace('\t','').split(',');

	var parsedEfficiencyPart = [];

	for (i = 0 ; i < elements.length ; i+=2 ) {
		var eff = {
			'name' : elements[i],
			'value' : elements[i+1]
		}
		parsedEfficiencyPart.push(eff);
	}

	return parsedEfficiencyPart;

}

function partHasInterestingProperties(part) {

	var interestingProperties = ["workSpace","livingSpace","efficiencyPart" ];

	for (i in interestingProperties) {
		if ( part[interestingProperties[i]] != undefined) {
			return true;
		} 
	}

	return false;
}

function readPartsDirectory(dirPath) {
	
	var parts = [];
	var fs = require('fs');
	var filenames = fs.readdirSync(dir);

	for ( i in filenames ) {
		var part = readPart(dirPath + filenames[i])
		if ( partHasInterestingProperties(part) ) {
			parts.push(part);
		}
	}

	writeToFile(parts);
	console.log("part = " + part)
}

if ( process.argv.length < 3 ) {
	console.log("Missing folder parameters. Usage: " + process.argv[1] +  " pathToMksPartsFolder")
	return;
}
var dir
dir = process.argv[2]
console.log(dir)

readPartsDirectory(dir)
